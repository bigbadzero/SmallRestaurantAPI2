// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallRestaurantAPI.Data;

namespace SmallRestaurantAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210621154554_addedCartItemStatus")]
    partial class addedCartItemStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "e0a6baab-48e8-4f5f-84c2-6d4a39a7bf15",
                            ConcurrencyStamp = "27d5abf9-484b-4506-9590-140149d91664",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a41e4665-c1a2-4b41-abb3-db99e0c13e4a",
                            ConcurrencyStamp = "9870279c-9cae-40e8-a705-fe4e75ccd68b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartItemStatusID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CartItemStatusID");

                    b.HasIndex("UserID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.CartItemStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CartItemStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Ordering"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Order Processing"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Order Ready"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Order Complete"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Burgers"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Chicken"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Pizza"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Combo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComboNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("ComboSizeOverride")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DrinkID")
                        .HasColumnType("int");

                    b.Property<int>("EntreeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SideID")
                        .HasColumnType("int");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DrinkID");

                    b.HasIndex("EntreeID");

                    b.HasIndex("SideID");

                    b.HasIndex("SizeID");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ComboNumber = 1,
                            EntreeID = 1,
                            Name = "Cheese Burger Combo"
                        },
                        new
                        {
                            ID = 2,
                            ComboNumber = 2,
                            EntreeID = 2,
                            Name = "3 Piece Chicken Finger Combo"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Condiment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Condiments");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Drink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SizeID");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Sweat Tea"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Coke"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Dr.Pepper"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Entree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SizeID");

                    b.ToTable("Entrees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryID = 1,
                            Name = "Cheese Burger"
                        },
                        new
                        {
                            ID = 2,
                            CategoryID = 2,
                            Name = "3 Piece Chicken Finger"
                        },
                        new
                        {
                            ID = 3,
                            CategoryID = 3,
                            Name = "Pepperoni Pizza"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeAddon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntreeID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntreeID");

                    b.HasIndex("IngredientID");

                    b.ToTable("EntreeAddons");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntreeID = 1,
                            IngredientID = 13
                        },
                        new
                        {
                            ID = 2,
                            EntreeID = 2,
                            IngredientID = 14
                        },
                        new
                        {
                            ID = 3,
                            EntreeID = 3,
                            IngredientID = 15
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeBaseIngredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntreeID")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.Property<bool?>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("EntreeID");

                    b.HasIndex("IngredientID");

                    b.ToTable("EntreeBaseIngredients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntreeID = 1,
                            IngredientID = 1,
                            isRequired = true
                        },
                        new
                        {
                            ID = 2,
                            EntreeID = 1,
                            IngredientID = 2,
                            isRequired = true
                        },
                        new
                        {
                            ID = 3,
                            EntreeID = 1,
                            IngredientID = 3,
                            isRequired = false
                        },
                        new
                        {
                            ID = 4,
                            EntreeID = 1,
                            IngredientID = 4,
                            isRequired = false
                        },
                        new
                        {
                            ID = 5,
                            EntreeID = 1,
                            IngredientID = 5,
                            isRequired = false
                        },
                        new
                        {
                            ID = 6,
                            EntreeID = 1,
                            IngredientID = 6,
                            isRequired = false
                        },
                        new
                        {
                            ID = 7,
                            EntreeID = 1,
                            IngredientID = 7,
                            isRequired = false
                        },
                        new
                        {
                            ID = 8,
                            EntreeID = 2,
                            IngredientID = 8,
                            isRequired = true
                        },
                        new
                        {
                            ID = 9,
                            EntreeID = 2,
                            IngredientID = 8,
                            isRequired = true
                        },
                        new
                        {
                            ID = 10,
                            EntreeID = 2,
                            IngredientID = 8,
                            isRequired = true
                        },
                        new
                        {
                            ID = 11,
                            EntreeID = 3,
                            IngredientID = 9,
                            isRequired = true
                        },
                        new
                        {
                            ID = 12,
                            EntreeID = 3,
                            IngredientID = 10,
                            isRequired = true
                        },
                        new
                        {
                            ID = 13,
                            EntreeID = 3,
                            IngredientID = 11,
                            isRequired = true
                        },
                        new
                        {
                            ID = 14,
                            EntreeID = 3,
                            IngredientID = 12,
                            isRequired = false
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeSize", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntreeID")
                        .HasColumnType("int");

                    b.Property<int>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EntreeID");

                    b.HasIndex("SizeID");

                    b.ToTable("EntreeSizes");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Hamburger bun"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Hamburger Patty"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Sliced Cheese"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Ketchup"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Mustard"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Onion"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Pickle"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Chicken Finger"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Pizza Crust"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Pizza Sauce"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Shredded Cheese"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Pepperoni"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Bacon"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Buffalo Sauce"
                        },
                        new
                        {
                            ID = 15,
                            Name = "Pineapple"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SelectedEntree", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartItemID")
                        .HasColumnType("int");

                    b.Property<int>("EntreeID")
                        .HasColumnType("int");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CartItemID");

                    b.HasIndex("EntreeID");

                    b.ToTable("SelectedEntrees");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SelectedIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedEntreeID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("SelectedEntreeID");

                    b.ToTable("SelectedIngredients");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Side", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SizeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SizeID");

                    b.ToTable("Sides");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "French Fries"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Onion Rings"
                        });
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SideAddon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IngredientID")
                        .HasColumnType("int");

                    b.Property<int>("SideID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IngredientID");

                    b.HasIndex("SideID");

                    b.ToTable("SideAddons");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Size", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("ID");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "S"
                        },
                        new
                        {
                            ID = 2,
                            Name = "M"
                        },
                        new
                        {
                            ID = 3,
                            Name = "L"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.CartItem", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.CartItemStatus", "CartItemStatus")
                        .WithMany()
                        .HasForeignKey("CartItemStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.ApiUser", "ApiUser")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("ApiUser");

                    b.Navigation("CartItemStatus");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Combo", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkID");

                    b.HasOne("SmallRestaurantAPI.Data.Entree", "Entree")
                        .WithMany()
                        .HasForeignKey("EntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideID");

                    b.HasOne("SmallRestaurantAPI.Data.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID");

                    b.Navigation("Drink");

                    b.Navigation("Entree");

                    b.Navigation("Side");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Drink", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Entree", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID");

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeAddon", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Entree", "Entree")
                        .WithMany("EntreeAddons")
                        .HasForeignKey("EntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entree");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeBaseIngredient", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Entree", "Entree")
                        .WithMany("EntreeBaseIngredients")
                        .HasForeignKey("EntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entree");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.EntreeSize", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Entree", "Entree")
                        .WithMany("EntreeSizes")
                        .HasForeignKey("EntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entree");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SelectedEntree", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.CartItem", "cartItem")
                        .WithMany("SelectedEntrees")
                        .HasForeignKey("CartItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.Entree", "Entree")
                        .WithMany()
                        .HasForeignKey("EntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cartItem");

                    b.Navigation("Entree");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SelectedIngredient", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmallRestaurantAPI.Data.SelectedEntree", "SelectedEntree")
                        .WithMany("SelectedEntreeIngredients")
                        .HasForeignKey("SelectedEntreeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("SelectedEntree");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Side", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeID");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SideAddon", b =>
                {
                    b.HasOne("SmallRestaurantAPI.Data.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID");

                    b.HasOne("SmallRestaurantAPI.Data.Side", "Side")
                        .WithMany()
                        .HasForeignKey("SideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Side");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.CartItem", b =>
                {
                    b.Navigation("SelectedEntrees");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.Entree", b =>
                {
                    b.Navigation("EntreeAddons");

                    b.Navigation("EntreeBaseIngredients");

                    b.Navigation("EntreeSizes");
                });

            modelBuilder.Entity("SmallRestaurantAPI.Data.SelectedEntree", b =>
                {
                    b.Navigation("SelectedEntreeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
